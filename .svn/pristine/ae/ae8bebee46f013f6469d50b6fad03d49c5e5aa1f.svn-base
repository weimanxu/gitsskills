<?php/** * 验证码类 * @author  Jose Rodriguez <jose.rodriguez@exec.cl> * @license GPLv3 * @link    http://code.google.com/p/cool-php-captcha * @package captcha * */class Captcha{    //图片宽度    private $width;    //图片高度    private $height;    //定义字体路径（其他文件调用要使用绝对路径）    public $resourcesPath;    //验证码字符个数    private $length;        //缩放比例
    private $persent;    /** Sessionname to store the original text */    private $session_var = 'captcha';    //图片背景颜色    private $backgroundColor = array(255, 255, 255);    //字体颜色数组(用于随机选择一种颜色的字体)    private $colors = array(        array(27,78,181), // blue        array(22,163,35), // green        array(214,36,7),  // red    );    //设定阴影    private $shadowColor = null; //array(0, 0, 0);    //干扰图线（0：不使用，1：使用）    private $lineWidth;    //随机选择一种字体，并配置其字体大小、间隔    public $fonts = array(        'Antykwa'  => array('spacing' => 3, 'minSize' => 25, 'maxSize' => 28, 'font' => 'AntykwaBold.ttf'),        'Candice'  => array('spacing' => 3, 'minSize' => 25, 'maxSize' => 28, 'font' => 'Candice.ttf'),        'DingDong' => array('spacing' => 3, 'minSize' => 25, 'maxSize' => 28, 'font' => 'Ding-DongDaddyO.ttf'),        'Duality'  => array('spacing' => 3, 'minSize' => 25, 'maxSize' => 28, 'font' => 'Duality.ttf'),        'Jura'     => array('spacing' => 3, 'minSize' => 25, 'maxSize' => 28, 'font' => 'Jura.ttf'),        'StayPuft' => array('spacing' => 3, 'minSize' => 25, 'maxSize' => 28, 'font' => 'StayPuft.ttf'),        'Times'    => array('spacing' => 3, 'minSize' => 25, 'maxSize' => 28, 'font' => 'TimesNewRomanBold.ttf'),        'VeraSans' => array('spacing' => 3, 'minSize' => 25, 'maxSize' => 28, 'font' => 'VeraSansBold.ttf'),        'MTCORSVA' => array('spacing' => 3, 'minSize' => 25, 'maxSize' => 28, 'font' => 'MTCORSVA.TTF'),    );    /** Wave configuracion in X and Y axes */    public $Yperiod    = 12;    public $Yamplitude = 5;//垂直波动    public $Xperiod    = 11;    public $Xamplitude = 1;//水平波动    /** letter rotation clockwise */    public $maxRotation = 8;    /**     * Internal image size factor (for better image quality)     * 1: low, 2: medium, 3: high     */    private $scale = 2;    /**      * Blur effect for better image quality (but slower image processing).     * Better image results with scale=3     */    private $blur = false;    /** Debug? */    private $debug = false;        /** Image format: jpeg or png */    private $imageFormat = 'jpeg';    /** GD image */    private $im;    public function __construct($width = 100, $height = 30, $codeLength = 4, $lineWidth = 0, $fontPersent = 0.7) {    	$this->resourcesPath = dirname(__FILE__).'/fonts';    	$this->width = $width;    	$this->height = $height;    	$this->length = $codeLength;    	$this->lineWidth = $lineWidth;    	$this->persent = $fontPersent;    }        /**     * 获取验证码     */    public function getAutoCode(){    	return $this->session_var;    }	    /**     * 生成图片验证码     */    public function CreateImage() {        $ini = microtime(true);        /** Initialization */        $this->ImageAllocate();                //获取验证码字符        $text = $this->GetRandomCaptchaText($this->length);        $fontcfg  = $this->fonts[array_rand($this->fonts)];//随机选用字体以及字体设置组成的数组        $this->WriteText($text, $fontcfg);        $this->session_var = $text;        /** Transformations */        if (!empty($this->lineWidth)) {            $this->WriteLine();        }        $this->WaveImage();        if ($this->blur && function_exists('imagefilter')) {            imagefilter($this->im, IMG_FILTER_GAUSSIAN_BLUR);        }        $this->ReduceImage();        if ($this->debug) {            imagestring($this->im, 1, 1, $this->height-8,                "$text {$fontcfg['font']} ".round((microtime(true)-$ini)*1000)."ms",                $this->GdFgColor            );        }    }    //生成图像画布    protected function ImageAllocate() {        // Cleanup        if (!empty($this->im)) {            imagedestroy($this->im);        }        $this->im = imagecreatetruecolor($this->width*$this->scale, $this->height*$this->scale);        // Background color        $this->GdBgColor = imagecolorallocate($this->im,            $this->backgroundColor[0],            $this->backgroundColor[1],            $this->backgroundColor[2]        );        imagefilledrectangle($this->im, 0, 0, $this->width*$this->scale, $this->height*$this->scale, $this->GdBgColor);        // Foreground color        $color           = $this->colors[mt_rand(0, sizeof($this->colors)-1)];        $this->GdFgColor = imagecolorallocate($this->im, $color[0], $color[1], $color[2]);        // Shadow color        if (!empty($this->shadowColor) && is_array($this->shadowColor) && sizeof($this->shadowColor) >= 3) {            $this->GdShadowColor = imagecolorallocate($this->im,                $this->shadowColor[0],                $this->shadowColor[1],                $this->shadowColor[2]            );        }    }    //产生随机字符    protected function GetRandomCaptchaText() {        $words  = "23456789abcdefghijmnpqrstvwyz";//29个字符        $text  = "";        for ($i=0; $i<$this->length; $i++) {            $text .= substr($words, mt_rand(0, 28), 1);//mt_rand取对应字符数的区间        }        return $text;    }    //干扰图线生成    protected function WriteLine() {        $x1 = $this->width*$this->scale*.15;        $x2 = $this->textFinalX;        $y1 = rand($this->height*$this->scale*.40, $this->height*$this->scale*.65);        $y2 = rand($this->height*$this->scale*.40, $this->height*$this->scale*.65);        $width = $this->lineWidth/2*$this->scale;        for ($i = $width*-1; $i <= $width; $i++) {            imageline($this->im, $x1, $y1+$i, $x2, $y2+$i, $this->GdFgColor);        }    }    //插入字符    protected function WriteText($text, $fontcfg = array()) {        if (empty($fontcfg)) {            // Select the font configuration            $fontcfg  = $this->fonts['Antykwa'];        }        //字体文件的完整路径        $fontfile = $this->resourcesPath.'/'.$fontcfg['font'];        // Text generation (char by char)        $x      = 20*$this->scale;        $y      = round(($this->height*27/40)*$this->scale);        $length = strlen($text);        for ($i=0; $i<$length; $i++) {            $degree   = rand($this->maxRotation*-1, $this->maxRotation);            $fontsize = rand($fontcfg['minSize'], $fontcfg['maxSize'])*$this->scale*$this->persent;            $letter   = substr($text, $i, 1);            if ($this->shadowColor) {                $coords = imagettftext($this->im, $fontsize, $degree,                    $x+$this->scale, $y+$this->scale,                    $this->GdShadowColor, $fontfile, $letter);            }            $coords = imagettftext($this->im, $fontsize, $degree, $x, $y, $this->GdFgColor, $fontfile, $letter);            $x += ($coords[2]-$x) + ($fontcfg['spacing']*$this->scale);        }        $this->textFinalX = $x;    }    //使字符产生弯曲效果    protected function WaveImage() {        // X-axis wave generation水平波浪        $xp = $this->scale*$this->Xperiod*rand(1,3);        $k = rand(0, 50);        for ($i = 0; $i < ($this->width*$this->scale); $i++) {            imagecopy($this->im, $this->im,                $i-1, sin($k+$i/$xp) * ($this->scale*$this->Xamplitude),                $i, 0, 1, $this->height*$this->scale);        }        // Y-axis wave generation垂直波浪        $k = rand(0, 50);        $yp = $this->scale*$this->Yperiod*rand(1,2);        for ($i = 0; $i < ($this->height*$this->scale); $i++) {            imagecopy($this->im, $this->im,                sin($k+$i/$yp) * ($this->scale*$this->Yamplitude), $i-1,                0, $i, $this->width*$this->scale, 1);        }    }    /**     * 降低图像的尺寸     * Reduce the image to the final size     */    protected function ReduceImage() {        // 缩小图片的尺寸        $imResampled = imagecreatetruecolor($this->width, $this->height);        imagecopyresampled($imResampled, $this->im,            0, 0, 0, 0,            $this->width, $this->height,            $this->width*$this->scale, $this->height*$this->scale        );        imagedestroy($this->im);        $this->im = $imResampled;    }    //生成图像    protected function WriteImage() {        if ($this->imageFormat == 'png' && function_exists('imagepng')) {        	ob_clean();//防止出现'图像因其本身有错无法显示'的问题。            header("Content-type: image/png");            imagepng($this->im);        } else {        	ob_clean();//防止出现'图像因其本身有错无法显示'的问题。            header("Content-type: image/jpeg");            imagejpeg($this->im);        }    }    //销毁图像    protected function Cleanup() {        imagedestroy($this->im);    }        //输出图像    public function output_image(){    	/** Output */
    	$this->WriteImage();
    	$this->Cleanup();    }}